from dotenv import load_dotenv
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
from langchain.callbacks import get_openai_callback

def extract_text_from_pdf(pdf):
    pdf_reader = PdfReader(pdf)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def main():
    load_dotenv()
    st.set_page_config(page_title="MINING CHATBOT")
    st.title("Mining Chatbot ðŸ’¬")
    
    # Sidebar for file upload and chat history
    st.sidebar.header("Chat History")
    chat_history = st.sidebar.empty()
    
    # Upload file
    pdf = st.file_uploader("Upload a PDF file:", type="pdf")
    
    if pdf is not None:
        text = extract_text_from_pdf(pdf)
        
        # Split into chunks
        text_splitter = CharacterTextSplitter(
            separator="\n",
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len
        )
        chunks = text_splitter.split_text(text)
      
        # Create embeddings
        embeddings = OpenAIEmbeddings()
        knowledge_base = FAISS.from_texts(chunks, embeddings)
        
        st.write("Chatbot is ready! Start asking questions:")
        
        chat_log = []
        
        while True:
            user_question = st.text_input("You: ")
            
            if not user_question:
                continue
            
            if user_question.lower() in ["exit", "quit", "bye"]:
                st.write("Chatbot: Goodbye! If you have more questions, feel free to ask.")
                break
            
            docs = knowledge_base.similarity_search(user_question)
            
            llm = OpenAI()
            chain = load_qa_chain(llm, chain_type="stuff")
            with get_openai_callback() as cb:
                response = chain.run(input_documents=docs, question=user_question)
            
            chat_log.append(("You", user_question))
            chat_log.append(("Chatbot", response))
            
            # Update the chat history
            chat_history.markdown('\n'.join([f"**{sender}:** {message}" for sender, message in chat_log]))
            
            # Speak the response
            engine = pyttsx3.init()
            engine.say(response)
            engine.runAndWait()
            
if __name__ == '__main__':
    main()
